from pycoin.ecdsa import generator_secp256k1
import hashlib, bitcoin


class CryptoUtils(object):

    @staticmethod
    def calc_sha256(data):
        """
        Returns a hashed string of hexadecimal digits using sha256.
        :param data: <str> Data to hash
        :return: <str>
        """

        hash_object = hashlib.sha256(str(text).encode("utf8"))
        return hash_object.hexdigest()

    def ripemd160(data):
        """
        Returns a hashed string of hexadecimal digits using RIPEMD-160
        :param data: <str> Data to hash
        :return: <str>
        """

        hash_bytes = hashlib.new('ripemd160', data.encode("utf8"))
        return hash_bytes.hexdigest()

    @staticmethod
    def sign_transaction(private_key, data):
        """
        Generates a transaction signature(hash) using private key and transaction data
        :param private_key: <str> Private Key to sign with
        :param data: object/str/hash that represent the data in the transaction
        :return: <str>
        """
        return CryptoUtils.calc_sha256(private_key+str(data))

    @staticmethod
    def generate_private_key(password):
        """
        Generates private key based on password
        :param password: <str> password for the private key
        :return: <str>
        """
        return CryptoUtils.calc_sha256(password)

    @staticmethod
    def generate_random_private_key():
        """
        Returns random private key in hex, generated by bitcoin lib
        :return: <str>
        """
        private_key = bitcoin.random_key()
        return private_key

    @staticmethod
    def generate_public_key(private_key):
        """
        Generates public key based on private key
        :param private_key: <str> Private key
        :return: <str>
        """
        pk = int(private_key, 16)
        public_key = (generator_secp256k1 * pk).pair()
        return hex(public_key[0])[2:] + str(public_key[1] % 2)

    @staticmethod
    def generate_address(public_key):
        """
        Generates network address based on public key
        :param public_key: <str>
        :return: <str>
        """
        return CryptoUtils.ripemd160(public_key)